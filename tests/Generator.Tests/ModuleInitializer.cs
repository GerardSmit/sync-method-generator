using System.Text.RegularExpressions;

namespace Generator.Tests;

/// <summary>
/// Module initializer.
/// </summary>
public static partial class ModuleInitializer
{
    private const string SimpleTestCasePattern = "// <auto-generated/>\\s*#nullable enable\\s*namespace Test;\\s*partial class Class\\s*{\\r\\n(.*)}";
    private const string DefaultTestPathPattern = "Test\\.Class\\.";

    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        VerifySourceGenerators.Initialize();
        VerifierSettings.RegisterFileConverter<RunResultWithIgnoreList>(Convert);
    }

    // From https://github.com/VerifyTests/Verify.SourceGenerators/issues/67#issuecomment-1536710180
    private static ConversionResult Convert(RunResultWithIgnoreList target, IReadOnlyDictionary<string, object> context)
    {
        var exceptions = new List<Exception>();
        var targets = new List<Target>();
        foreach (var result in target.Result.Results)
        {
            if (result.Exception != null)
            {
                exceptions.Add(result.Exception);
            }

            var collection = result.GeneratedSources
                .Where(x => !target.IgnoredFiles.Contains(x.HintName))
                .OrderBy(x => x.HintName)
                .Select(SourceToTarget);
            targets.AddRange(collection);
        }

        if (exceptions.Count == 1)
        {
            throw exceptions.First();
        }

        if (exceptions.Count > 1)
        {
            throw new AggregateException(exceptions);
        }

        if (target.Result.Diagnostics.Any())
        {
            var info = new
            {
                target.Result.Diagnostics,
            };
            return new(info, targets);
        }

        return new(null, targets);
    }

    private static Target SourceToTarget(GeneratedSourceResult source)
    {
#if NET7_0_OR_GREATER
        var r = DefaultTestRegex();
#else
        var r = new Regex(SimpleTestCasePattern, RegexOptions.Singleline | RegexOptions.Compiled);
#endif
        var sourceText = source.SourceText.ToString();
        var match = r.Match(source.SourceText.ToString());

        var sourceToStore = match.Success ? TestHelper.ChangeIndentation(match.Groups[1].Value, TestHelper.RemoveIndentation) : sourceText;

        var data = $"""
            //HintName: {source.HintName}
            {sourceToStore}
            """;

        var path = Path.GetFileNameWithoutExtension(source.HintName);
#if NET7_0_OR_GREATER
        var r2 = DefaultTestPathRegex();
#else
        var r2 = new Regex(DefaultTestPathPattern, RegexOptions.Singleline | RegexOptions.Compiled);
#endif
        path = r2.Replace(path, string.Empty);
        return new("cs", data, path);
    }

#if NET7_0_OR_GREATER
    [GeneratedRegex(SimpleTestCasePattern, RegexOptions.Singleline | RegexOptions.Compiled)]
    private static partial Regex DefaultTestRegex();

    [GeneratedRegex(DefaultTestPathPattern)]
    private static partial Regex DefaultTestPathRegex();
#endif

    internal sealed class RunResultWithIgnoreList
    {
        public required GeneratorDriverRunResult Result { get; init; }

        public List<string> IgnoredFiles { get; init; } = [];
    }
}
