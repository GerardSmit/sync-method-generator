//HintName: Test.EnumerableExtensions.IndexOfMaxSoFarAsync.g.cs
// <auto-generated/>
#nullable enable
namespace Test
{
    public static partial class EnumerableExtensions
    {
        /// <summary>
        /// Finds maximum value so far and returns its 0 based index
        /// </summary>
        /// <typeparam name="T">Numeric type</typeparam>
        /// <param name="items">Items to scan.</param>
        /// <returns>Max indices</returns>
        public static global::System.Collections.Generic.IEnumerable<int> IndexOfMaxSoFar<T>(this global::System.Collections.Generic.IEnumerable<T> items)
#if NET7_0_OR_GREATER
            where T : IComparisonOperators<T, T, bool>
#else
            where T : global::System.IComparisonOperators<T, T>
#endif
        {
            var i = 0;

            T? largestSoFar = default;
            foreach (var item in items)
            {

                if (largestSoFar is null || largestSoFar < item)
                {
                    largestSoFar = item;
                    yield return i;
                }

                ++i;
            }
        }
    }
}
